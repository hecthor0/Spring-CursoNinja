package com.bbva.ninja.microservices.limitsservice.controllers;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.bbva.ninja.microservices.limitsservice.model.Limit;
import com.bbva.ninja.microservices.limitsservice.model.Message;
import com.bbva.ninja.microservices.limitsservice.services.LimitsService;

@RestController
@RequestMapping(value="accounts/v1/accounts/{accountId}")
public class LimitsController {
	
	@Autowired
    private LimitsService limitsService;
	
	@RequestMapping(value="/limits", method = RequestMethod.GET)
    public ResponseEntity<Iterable<Limit>> getLimits( @PathVariable("accountId") String accountId) {
		Iterable<Limit> limits =  limitsService.getLimits(accountId);
		HttpStatus HttpS = HttpStatus.OK;
		
		int size = 0;
		if(limits != null) {
			if (limits instanceof Collection) {
			    size = ((Collection<?>) limits).size();
			}
			if(size <= 0) {
				HttpS = HttpStatus.NO_CONTENT;
			}
		}
		
		return ResponseEntity.status(HttpS).body(limits);
    }
	
	@RequestMapping(value="/limits", method = RequestMethod.POST)
    public ResponseEntity<Limit>  createLimit( @PathVariable("accountId") String accountId, @Valid @RequestBody Limit limit) {
		Limit returnLimit = limitsService.createLimit(limit);
		return ResponseEntity.status(HttpStatus.CREATED)
        .body(returnLimit);
    }	
	
	@ResponseStatus(HttpStatus.BAD_REQUEST)
	@ExceptionHandler(MethodArgumentNotValidException.class)
	public List<Message> handleValidationExceptions(
	  MethodArgumentNotValidException ex) {
	    List<Message> errors = new ArrayList<Message>();
	    ex.getBindingResult().getAllErrors().forEach((error) -> {
	        String fieldName = ((FieldError) error).getField();
	        String errorMessage = error.getDefaultMessage();
	        
	        Message message = new Message();
	        message.setCode(errorMessage.split(":")[0]);
	        message.setType(errorMessage.split(":")[1]);
	        message.setMessage(errorMessage.split(":")[2]);
	        errors.add(message);
	    });
	    return errors;
	}

	
}
